{
  "info": {
    "name": "Envelopes Auth + KYC Flow",
    "_postman_id": "d4d9c2f8-2f5d-4f3f-9a0a-7f2b2ea9c1a3",
    "version": { "major": 1, "minor": 0, "patch": 0 },
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
  "description": "End-to-end: register -> (optional resend) -> verify email -> login -> start KYC -> poll status -> final assert. One-click runner with self-managed variables.\n\nEnv Var Guidance (frontend):\n- Preferred: VITE_API_URL=<your backend root, no trailing slash>\n- Legacy supported: VITE_API_BASE_URL=<backend root>\nIf neither is set in dev, defaults to http://localhost:5000; in prod falls back to https://api.example.com until configured."
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Normalize baseUrl (remove single trailing slash) before every request",
          "let b = pm.variables.get('baseUrl') || pm.environment.get('baseUrl');",
          "if (b) { b = b.replace(/\/$/, ''); pm.variables.set('baseUrl', b); }",
          "// Initialize poll attempts counter if absent",
          "if (!pm.environment.get('kycPollAttempts')) pm.environment.set('kycPollAttempts', '0');"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Register",
      "id": "c1f1c6c0-6c4c-4b6e-9c4e-1e5f2c1a9b01",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/api/auth/register",
        "body": { "mode": "raw", "raw": "{\n  \"name\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomInt}}-tester@example.com\",\n  \"password\": \"{{password}}\"\n}" }
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Registered 200/201', () => [200,201].includes(pm.response.code));",
          "if(![200,201].includes(pm.response.code)){ return; }",
          "const json = pm.response.json();",
          "pm.environment.set('email', json.user && json.user.email ? json.user.email : pm.environment.get('email'));",
          "// Some backends may not issue auth token until verification; store if present",
          "if (json.token) pm.environment.set('token', json.token);",
          "pm.environment.set('registered', 'true');"
        ] } }
      ]
    },
    {
      "name": "Resend Verification (optional)",
      "id": "e2b2cf22-1d1d-4e2f-b3c3-2b2f1d1e2c2f",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/api/auth/resend-verification",
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\"\n}" }
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Resend 200', () => pm.response.code === 200);"
        ] } }
      ]
    },
    {
      "name": "Verify Email",
      "id": "a3d3ef44-5a5a-4c4d-9e9f-7b7a6c6d5e5f",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/api/auth/verify-email",
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\",\n  \"code\": \"{{verificationCode}}\"\n}" }
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Verify email 200', () => pm.response.code === 200);",
          "if(pm.response.code !== 200){ return; }",
          "pm.environment.set('emailVerified', 'true');"
        ] } }
      ]
    },
    {
      "name": "Login",
      "id": "b4e4fa55-6b6b-5d5e-afaf-8c8b7d7e6f6a",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/api/auth/login",
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}" }
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Login 200', () => pm.response.code === 200);",
          "if(pm.response.code !== 200){ return; }",
          "const json = pm.response.json();",
          "pm.environment.set('token', json.token);",
          "pm.test('Token present', () => !!pm.environment.get('token'));"
        ] } }
      ]
    },
    {
      "name": "Start KYC",
      "id": "c5f50b66-7c7c-6e6f-b0b0-9d9c8e8f7a7b",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": "{{baseUrl}}/api/kyc/start",
        "body": { "mode": "raw", "raw": "{\n  \"legalFirstName\": \"Jane\",\n  \"legalLastName\": \"Doe\",\n  \"dob\": \"1990-01-01\",\n  \"ssnLast4\": \"1234\",\n  \"addressLine1\": \"123 Main St\",\n  \"city\": \"Austin\",\n  \"state\": \"TX\",\n  \"postalCode\": \"78701\"\n}" }
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Start KYC 200', () => pm.response.code === 200);",
          "if(pm.response.code !== 200){ return; }",
          "const json = pm.response.json();",
          "pm.environment.set('kycStatus', json.status || 'pending');",
          "pm.environment.set('kycPollAttempts', '0');"
        ] } }
      ]
    },
    {
      "name": "KYC Status (Poll)",
      "id": "d6a61c77-8d8d-7f70-c1c1-aeaea9a9b8b8",
      "request": {
        "method": "GET",
        "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ],
        "url": "{{baseUrl}}/api/kyc/status"
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Status 200', () => pm.response.code === 200);",
          "const json = pm.response.json();",
          "const status = json.status || 'unknown';",
          "pm.environment.set('kycStatus', status);",
          "let attempts = parseInt(pm.environment.get('kycPollAttempts') || '0',10);",
          "attempts++; pm.environment.set('kycPollAttempts', attempts.toString());",
          "const max = parseInt(pm.environment.get('maxKycPollAttempts') || pm.collectionVariables.get('maxKycPollAttempts') || '10',10);",
          "if (status === 'pending' && attempts < max) {",
          "  console.log('KYC still pending (attempt '+attempts+')');",
          "  postman.setNextRequest('KYC Status (Poll)');",
          "} else {",
          "  postman.setNextRequest('KYC Final Assert');",
          "}"
        ] } }
      ]
    },
    {
      "name": "KYC Final Assert",
      "id": "e7b72d88-9e9e-8081-d2d2-bfbfb0b0c9c9",
      "request": {
        "method": "GET",
        "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ],
        "url": "{{baseUrl}}/api/kyc/status"
      },
      "event": [
        { "listen": "test", "script": { "type": "text/javascript", "exec": [
          "pm.test('Final status 200', () => pm.response.code === 200);",
          "const json = pm.response.json();",
          "const status = json.status || pm.environment.get('kycStatus');",
          "pm.test('KYC reached terminal state', () => ['approved','rejected','pending'].includes(status));",
          "if (status === 'pending') { pm.test('Pending exceeded max attempts', () => false); }",
          "pm.environment.set('kycStatus', status);"
        ] } }
      ]
    }
  ],
  "variable": [
  { "key": "baseUrl", "value": "https://d12fe605-62cb-49b0-b8ae-60c33cc2dc94-00-3mx79pg8q976x.janeway.replit.dev" },
    { "key": "verificationCode", "value": "123456" },
    { "key": "password", "value": "Passw0rd!" },
    { "key": "maxKycPollAttempts", "value": "10" }
  ]
}
